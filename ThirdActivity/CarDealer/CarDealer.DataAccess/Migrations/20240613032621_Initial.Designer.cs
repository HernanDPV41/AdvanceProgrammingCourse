// <auto-generated />
using System;
using CarDealer.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealer.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240613032621_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Orders.BuyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("BuyOrders", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergySource")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.EnterpriseClient", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Clients.Client");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("EnterpriseClients", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.PrivateClient", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Clients.Client");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("PrivateClients", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("IsAutonome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDescapotable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("INTEGER");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("HasSideCar")
                        .HasColumnType("INTEGER");

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Orders.BuyOrder", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealer.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.OwnsOne("CarDealer.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Currency")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.EnterpriseClient", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Clients.EnterpriseClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CarDealer.Domain.ValueObjects.PhysicalLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("EnterpriseClientId")
                                .HasColumnType("TEXT");

                            b1.HasKey("EnterpriseClientId");

                            b1.ToTable("EnterpriseClients");

                            b1.WithOwner()
                                .HasForeignKey("EnterpriseClientId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.PrivateClient", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Clients.PrivateClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Vehicles.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Vehicles.Motorcycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
