// <auto-generated />
using System;
using CarDealer.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealer.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.PhysicalLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PhysicalLocations", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Common.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Orders.BuyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BuyOrders", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergySource")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.EnterpriseClient", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Clients.Client");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.ToTable("EnterpriseClients", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.PrivateClient", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Clients.Client");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("PrivateClients", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("IsAutonome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDescapotable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassangerCapacity")
                        .HasColumnType("INTEGER");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasBaseType("CarDealer.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("HasSideCar")
                        .HasColumnType("INTEGER");

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.EnterpriseClient", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Clients.EnterpriseClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Clients.PrivateClient", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Clients.PrivateClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Vehicles.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealer.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasOne("CarDealer.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarDealer.Domain.Entities.Vehicles.Motorcycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
